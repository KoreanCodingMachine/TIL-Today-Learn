/*
타입 변환이란? 
기존 원시 값을 사용해 다른 타입의 새로운 원시값을 생성하는 것이다.

명시적 타입 변환(타입 캐스팅)
암묵적 타입 변환(강제 타입변환)

암묵적 타입 변환은 자바스크립트 엔진에 의해서 표현식을 에러없이 평가하기 위해
피연산자의 값을 암묵적 타입 변환해 새로운 타입의 값을 만들어 단 한번 사용하고 버린다.
원시 타입 중 하나로 타입을 자동 변환한다.
*/

// 암묵적 타입 변환

//1.문자열 타입으로 변환
console.log(1 + '2'); // '12'

//2.숫자 타입으로 변환
//빈 문자열(''),빈 배열([]),null,false 는 0으로 , true는 1로 변환된다.
//객체,빈 배열이 아닌 배열,undefined는 NaN이 된다.
console.log(1 - '2'); // -1

//3.불리언 타입으로 변환
//자바스크립트 엔진은 불리언 타입이 아닌 값을 Truthy값 또는 Falsy값 으로 구분한다.
//Truthy -> true , Falsy -> false로 암묵적 타입 변환된다.
//false , undefined , null , 0 , -0 , NaN , ''(빈 문자열) ->Falsy값
//Falsy값 이외 모든 값은 모두 true로 평가된다.

//명시적 타입 변환

//1.문자열 타입으로 변환

//1.String 생성자 함수를 new연산자 없이 호출하는 방법
String(1); // '1'

//2.Object.prototype.toString 메서드를 사용하는 방법
(1).toString(); // '1'
NaN.toString(); // 'NaN'

//3.문자열 연결 연산자를 이용하는 방법
1 + ''; // '1'
NaN + ''; // 'NaN'

//2.숫자 타입으로 변환

//1.Number 생성자 함수를 new 연산자 없이 호출하는 방법
Number('0'); // 0

//2.parseInt , parseFloat 함수를 사용하는 방법(문자열만 숫자 타입으로 변환 가능)
parseInt('0'); // 0
parseFloat('0'); // 0.0

//3. + 단항 산술 연산자를 이용하는 방법
+'0'; // 0
+'-1'; // -1

//4. *산술 연산자를 이용하는 방법
'0' * 1; // 0
'-1' * 1; // -1

//3.불리언 타입으로 변환

//1.Boolean 생성자 함수를 new연산자 없이 호출하는 방법
Boolean('x'); // true
Boolean('false'); // true
Boolean(''); // false
//2.!부정 논리 연산자를 두 번 사용하는 방법 -> !!
!!'x'; // true
!!''; // false
